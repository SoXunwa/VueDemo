webpack 引用的 vue 与 普通网页引用的vue 不同，引用的是阉割版的vue（vue.runtime.common.js），功能不全。

vue.runtime.common.js 没有编译器模块，所以不支持以下方式创建组件：
var login = {
    template:"<h1>登录组件</h1>"
}

当在 webpack 中使用 vue.runtime.common.js 时，可通过.vue 文件使用组件：

    1.创建login.vue 文件：由 <script> <template> <style> 三部分组成
    <template>登录组件</template>
    <style>CSS样式内容</style>
    <script>
        export default {
          // 把当前这段代码导出名字为 App 的模板
          name: 'login'
        };
    </script>


    // 因为 webpack 默认不支持解析.vue 文件，所以需要安装 vue-loader 模块，而 vue-loader 模块基于 vue-template-compiler，
    // 所以需要安装这两个模块：npm install vue-loader vue-template-compiler -D
    // 安装之后 在配置文件中 webpack.config.js 中新增loader 配置项：
    module.exports={
        module:{
            // 第三方模块的匹配规则
            rules:[
                    {
                        test:/\.vue$/,
                        use: 'vue-loader'
                    }
            ]
        }
    }

    // vue init webpack xx项目名 创建项目 会解决相关的依赖问题，开箱即用。
    2.在需要使用组件的地方导入 .vue文件：import login from './login.vue';

    3.然后通过 Vue 对象的 render 属性方法去渲染
    new Vue({
           render: function (createElements) {
                var html = createElements(login);
                // return 返回的HTML 结构，会替换 Vue 对象中 el 指定的 div 容器
                return html;
            }
            //简写
            //render:createElements=>createElements(login)
    })



如果想要在 webpack 项目中引用完整版的 vue 可以通过以下两种方式引用：
//方法一，直接引用
main.js：
import Vue from "../node_modules/vue/dist/vue.js";

//方法二
webpack.config.js
module.exports= {
    ...
    // 新增属性
    resolve:{
        alias:{
            "vue$":"vue/dist/vue.js"
        }
    }
}
